name: release

# Only do the release on x.y.z tags.
on:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"
    - "[0-9]+.[0-9]+.[0-9]+"

# We need this to be able to create releases.
permissions:
  contents: write

jobs:
  # The create-release job runs purely to initialize the GitHub release itself,
  # and names the release after the `x.y.z` tag that was pushed. It's separate
  # from building the release so that we only create the release once.
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --verify-tag --title $VERSION
    outputs:
      version: ${{ env.VERSION }}

  build:
    name: build
    needs: create-release
    runs-on: ubuntu-latest
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
    strategy:
      fail-fast: false
      matrix:
        include:
        - build: stable-x86
          os: ubuntu-latest
          rust: stable
          target: i686-unknown-linux-gnu
    
    steps:
      - uses: actions/checkout@v5
    
      - name: Install Rust toolchain
        run: rustup update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}
      
      - name: Show command used for Cargo
        shell: bash
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        shell: bash
        run: |
          ${{ env.CARGO }} build --verbose --release 
          if [[ "${{ matrix.os }}" == windows-* ]]; then
            bin="target/${{ matrix.target }}/release/webinfo.exe"
          else
            bin="target/${{ matrix.target }}/release/webinfo"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: Release assets
        run: |
         zip -r webinfo-${{ matrix.target }}.zip target/${{ matrix.target }}/release/webinfo
         gh release upload ${{ github.ref_name }} webinfo-${{ matrix.target }}.zip
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}